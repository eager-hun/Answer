/**
 * @file
 * Base styles.
 *
 * Looks like just some custom extensions to normalize.css stuff.
 */


// #############################################################################
// Layout.

*,
*:before,
*:after {
  @include box-sizing(border-box);
}


// #############################################################################
// Typography.

html {
  font-family: $font-websafe-sans-1;
  font-size: 100% * ($default-font-size / 16px);
  // font-family: $font-web-sans-1;
  // font-size: 103% * ($default-font-size / 16px);
  line-height: $default-line-height;
}

// I plan to try loading the webfont with
// https://github.com/filamentgroup/loadCSS ,
// and also heard that some browsers may hide text while fonts load:
// https://www.igvita.com/2015/04/10/fixing-the-blank-text-problem/
// So I only declare a webfont if I have tested that JS instructions - alike the
// one delivering the font - actually work.
// http://kryogenix.org/code/browser/everyonehasjs.html
//
// Though it seems that the following declaration can trigger the occurence of
// transparent text; complex stuff, needs more investigation. TODO.
//
// html.has-js {
//   font-family: $font-web-sans-1;
//   font-size: 105% * ($default-font-size / 16px);
// }

h1,
h2,
h3,
h4,
h5,
h6,
.pseudo-heading {
  line-height: 1.25;
}

h1,
.h1 {
  @include h1-style;
}
h2,
.h2 {
  @include h2-style;
}
article {
  h2,
  .h2 {
    @include h2-style-in-article;
  }
}
h3,
.h3 {
  @include h3-style;
}
h4,
.h4 {
  @include h4-style;
}
h5,
.h5 {
  @include h5-style;
}
h6,
.h6 {
  @include h6-style;
}

ul {
  padding-left: 1em;
}
ol {
  padding-left: 1.35em;
}

dt {
  font-style: italic;
  font-weight: 700;

  dd + & {
    margin-top: 0.3em;
  }
}
dd {
  margin-left: $layout-pad;
}

a {
  // Preventing longish links dangling out of screen on small screens.
  word-wrap: break-word;
}

code {
  font-size: 0.8em;
  word-wrap: break-word;
}
.messages .code {
  font-size: 0.9em;
}
pre {
  code {
    word-wrap: normal;
    display: block;
    max-width: 100%;
    overflow: auto;
    padding: $layout-pad;
  }
}

table {
  font-size: 0.9em;
  width: 100%;
}
th {
  text-align: left;
  vertical-align: top;
}
th,
td {
  border: 1px solid color(border-light);
  padding: 0.25em 0.35em;
}

// Protector element around every table in the content, to prevent tables
// from dangling out of their column.
// https://github.com/sniku/jQuery-doubleScroll may be of simple help,
// https://datatables.net/extensions/responsive/ may be of advanced help.
.table__wrap {
  max-width: 100%;
  overflow: auto;
}

// Margin-fixes.
h1,
h2,
h3,
h4,
h5,
h6,
.pseudo-heading {
  &:first-child {
    margin-top: -0.25em; // To compensate for their line-height.
  }
}
p,
ul,
ol,
dl
{
  &:first-child {
    margin-top: 0;
  }
}
p,
ul,
ol,
dl
{
  &:last-child {
    margin-bottom: 0;
  }
}

// Misc text.

hr {
  height: 0;
  background: 0;
  border: 0;
  border-top: 1px solid color(border-light);
}

// #############################################################################
// Media.

img,
video {
  max-width: 100%;
  height: auto;
}

.lt-ie9 {
  img {
    // Fixing 'responsive images' not showing in ie8.
    // Note that after this, image sizes were needed to be declared manually.
    // (If you supported ie8.)
    max-width: none;

    // Remove border when inside `a` element in IE 8/9.
    // border: 0; // TODO: check it out.
  }
}


// #############################################################################
// Misc. components.

.label {
  color: color(minor);
  font-style: italic;
  font-size: 0.9em;

  &:after {
    content: ':';
  }
  &.mute:after {
    content: none;
  }
}

.button--action {
  @include button($color: action);
}
.button--nav {
  @include button($color: nav);
}


// #############################################################################
// Accessibility-related:

.jump-links {
  background: color(bg-dark);
  height: 0;
  position: relative;
}
a.jump-link { // Overqualifying because of link rules to be overridden.
  @include transition-property(top,opacity);
  @include transition-duration($transitspeed-fast,$transitspeed-fast);
  @include border-bottom-radius;

  &,
  &:focus,
  &:hover {
    border: 1px solid rgba(lighten(color(nav), 20%), 0.75);
    color: color(text-invert);
    text-decoration: none;
  }

  background: color(bg-dark);
  background: rgba(color(bg-dark), 0.75);
  display: block;
  left: 50%;
  line-height: 2em;
  margin-left: -$layout-page-min-width/2;
  position: absolute;
  opacity: 0;
  outline: 0;
  text-decoration: none;
  text-align: center;
  top: -2em;
  width: $layout-page-min-width;
  z-index: 1000;
}
.jump-link:focus {
  opacity: 1;
  top: -1px;
}

#navigation:focus,
.primary-content:focus,
#modal--common:focus
{
  // NOTE: now that I use tabindex="-1" for these, this hidden outline is
  // needless (wasn't a very good practice anyways), as one cannot tab to these
  // elements now (with tabindex="-1", they're only available as anchor- and JS
  // .focus() targets).
  outline: none;
}


// #############################################################################
// Misc. utils.

// Allows a gap between target and the top of the screen when jumping to anchors
// on the page.
span.anchor {
  display: inline-block;
  position: relative;
  top: -0.75em;
  vertical-align: text-top;
}

.hidden {
  @include hidden;
}
