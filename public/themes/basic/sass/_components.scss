/**
 * @file
 * Components.
 *
 * Components are such elements on the pages that exist at their own right, and
 * other things can not build upon them.
 */


// #############################################################################
// Content meta-data readout.

.content-meta__info {
  font-size: 0.9em;
  padding: $layout-pad*0.5 0 0;
}
.content-meta__item {
  display: inline-block;
  line-height: 1.8;
  margin: 0 $layout-pad*3 $layout-pad*0.5 0;

  &:last-child {
    margin-right: 0;
  }
  li {
    display: inline-block;
  }
  .label {
    display: block;
  }
}


// #############################################################################
// In-text components.

.textbox,
blockquote {
  @include textbox-base;
}
.textbox--hero {
  @include textbox-variant(hero);
}
.textbox--highlight {
  @include textbox-variant(highlight);
}
.textbox--note {
  @include textbox-variant(note);
}
.textbox--links {
  @include textbox-variant(links);
}
blockquote {
  @include textbox-variant(blockquote);
}

// Defintions-list-y style for Markdown-authored material.
// 1. Default Markdown implementations don't handle <dl>'s at all.
//    1a. I only want to use a default Markdown implementation, because to me,
//        that's whose remaining maintained seems to be the most likely.
// 2. I like <dl>'s a lot.
// 3. I don't want to give up Markdown's help within manually declared <dl>
//    items.
// 4. So I came up with wrapping a regular (Markdown-supported) <ul> into a div
//    that has a '.defs' class.
//    4a. Yes, default Markdown implementations don't do much inside divs
//        either.
//    4b. That's why I use custom ==DEFS== and ==/DEFS== strings in the text
//        that I preg_replace into the div.defs after parsing with Markdown.

.defs {
  // Making it look more definitions-list-y.
  & > ul {
    @include bare-list;

    & > li {
      & > p,
      & > div {
        margin-left: 1em;
      }
      & > p:first-of-type {
        font-style: italic;
        font-weight: 700;
      }
    }
    ul {
      list-style-type: disc;
      padding-left: $layout-pad*2;

      ul {
        list-style-type: circle;
        padding-left: $layout-pad*1.5;

        ul {
          list-style-type: square;
        }
      }
    }
  }
}


// #############################################################################
// Fields.

.tpl--field {
  margin-bottom: $layout-pad;

  &:last-child {
    margin-bottom: 0;
  }
}

.field_type--image {
  a,
  img {
    @include image-fit;
  }

  .tpl--field + &,
  & + .tpl--field {
    margin-top: $layout-pad*2;
  }
}

.p10n--dynamic_full {
  .field_id--field_description {
    margin-bottom: $layout-pad*2;
  }
}


// #############################################################################
// (Flexi)list-related arrangements.

.l--list-plain {
  & > .item + .item {
    border-top: 1px solid color(border-light);
    margin-top: $layout-pad*2;
    padding-top: $layout-pad*2;
  }
  .field_id--field_title {
    @include h5-style;

    margin-top: 1em;
  }
  .field_id--field_preview_text {
    font-size: 0.9em;
  }
}

@include breakpoint($bkp-narrow-mt-min) {
  .l--list-plain {
    .field_id--field_title {
      margin-top: -0.25em;
    }
  }
}


// #############################################################################
// Presentations.