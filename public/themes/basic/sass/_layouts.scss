/**
 * @file
 * Layouts.
 */

.box {
  @include box();
}

.tpl--block {
  margin-bottom: $layout-pad*2;

  &:last-child {
    margin-bottom: 0;
  }
}
.col--sidebar .tpl--block {
  margin-bottom: $layout-pad*1.5;

  &:last-child {
    margin-bottom: 0;
  }
}
.column {
  // Same as the sidebar block margin.
  margin-bottom: $layout-pad*1.5;
}


// #############################################################################
// Layouts.

/**
 * @see
 * https://github.com/at-import/Singularity/wiki
 * http://snugug.github.io/RWD-with-Sass-Compass/#/interesting-grids
 * http://snugug.github.io/RWD-with-Sass-Compass/#/nested-grid-html
 * http://stackoverflow.com/a/24092721 (syntax-change)
 *
 * Note about out-of-the-blue clear: right;'s at unexpected places in grid
 * declarations: while grid items by default are floated left, in Singularity
 * grid (and in Zen-grids too, I'd expect) each row's last item is being floated
 * to right, to fight inconsistencies originating from pixel-rounding-errors.
 * Clearing right there is neccessary to keep a bottom row's last item in place
 * when in the row above the last item grows the most tall.
 *
 * See:
 * https://www.palantir.net/blog/responsive-design-s-dirty-little-secret
 */


// #############################################################################
// Setting up grids.

// @include sgs-change('debug', true); // The grid-bg-displays depend on this.

.grid {
  @include grids-common;

  // .tpl--block { background: rgba(black,0.1); } // For debugging;
}


// #############################################################################
// .l--2sb: a layout with 2 sidebars.

// -----------------------------------------------------------------------------
// .l--2sb debug helper.
// The content this part styles is coming from the website instance currently
// called "full-page-prototype".
.fpp-layouts-demo {
  text-align: center;

  .l--2sb {
    margin-bottom: 2em;

    .col--main {
      background: rgba(dodgerblue, 0.3);
    }
    .col--sb_1 {
      background: rgba(red, 0.3);
    }
    .col--sb_2 {
      background: rgba(lime, 0.4);
    }
    .dummy-content {
      background: rgba(#000, 0.1);
      border: 1px solid white;
      margin: 0 0 1em;
      min-height: 100px;
    }
  }
  h3 + .l--2sb,
  h4 + .l--2sb {
   margin-top: 2em;
  }
}

// This layout is used (best) for the primary layout of a page.

// There are three sets of settings here: one for a symmetric arrangement, and
// two others for grouping both the sidebars onto the left or right side
// correspondingly.

// NOTE:
// The arrangements you don't use should be commented out in order to not weigh
// down the generated .css file.

// -----------------------------------------------------------------------------
// Default arrangement is a symmetric one: .col--main is in the center,
// sidebars surround it from each side.

// CONTENT-IN-MID: There is one sidebar: .col--sb_1
.l--2sb.content-in-mid.has-1-sb.sb-1 {
  @include add-grid(6 18 at $bkp-wide-min);
  @include add-gutter(1.7 at $bkp-wide-min);
  // @include background-grid;
}
.l--2sb.content-in-mid.has-1-sb.sb-1 {
  @include breakpoint($bkp-wide-min) {
    & > .col--main {
      @include grid-span(1, 2);
    }
    & > .col--sb_1 {
      @include grid-span(1, 1);
    }
    & > .column {
      margin-bottom: 0;
    }
  }
}
// CONTENT-IN-MID: There is one sidebar: .col--sb_2
.l--2sb.content-in-mid.has-1-sb.sb-2 {
  @include add-grid(18 6 at $bkp-wide-min);
  @include add-gutter(1.7 at $bkp-wide-min);
  // @include background-grid;
}
.l--2sb.content-in-mid.has-1-sb.sb-2 {
  @include breakpoint($bkp-wide-min) {
    & > .col--main {
      @include grid-span(1, 1);
    }
    & > .col--sb_2 {
      @include grid-span(1, 2);
    }
    & > .column {
      margin-bottom: 0;
    }
  }
}
// CONTENT-IN-MID: Present in the layout: both sidebars.
.l--2sb.content-in-mid.has-2-sb {
  @include add-grid(6 18 at $bkp-wide-min);
  @include add-gutter(1.7 at $bkp-wide-min);
  @include add-grid(6 12 6 at $bkp-wide-ht-min);
  @include add-gutter(0.85 at $bkp-wide-ht-min);
  // @include background-grid;
}
.l--2sb.content-in-mid.has-2-sb {
  @include breakpoint($bkp-wide-min) {
    & > .col--main {
      @include grid-span(1, 2);

      margin-bottom: 8%;
    }
    & > .col--sb_1 {
      @include grid-span(1, 1);

      margin-bottom: 8%;
    }
    & > .col--sb_2 {
      clear: both;
    }
  }
  @include breakpoint($bkp-wide-ht-min) {
    & > .col--main {
      @include grid-span(1, 2);
    }
    & > .col--sb_1 {
      @include grid-span(1, 1);
    }
    & > .col--sb_2 {
      @include grid-span(1, 3);
    }
    & > .column {
      margin-bottom: 0;
    }
  }
}

// -----------------------------------------------------------------------------
// .layout_2sb variant: &.content-on-left

// CONTENT-LEFT: There is one sidebar.
.l--2sb.content-on-left.has-1-sb {
  @include add-grid(18 6 at $bkp-wide-min);
  @include add-gutter(1.7 at $bkp-wide-min);
  // @include background-grid;
}
.l--2sb.content-on-left.has-1-sb {
  @include breakpoint($bkp-wide-min) {
    & > .col--main {
      @include grid-span(1, 1);
    }
    & > .col--sidebar {
      @include grid-span(1, 2);
    }
    & > .column {
      margin-bottom: 0;
    }
  }
}
// CONTENT-LEFT: Present in the layout: both sidebars.
.l--2sb.content-on-left.has-2-sb {
  @include add-grid(18 6 at $bkp-wide-min);
  @include add-gutter(1.7 at $bkp-wide-min);
  @include add-grid(12 6 6 at $bkp-wide-ht-min);
  @include add-gutter(0.85 at $bkp-wide-ht-min);
  // @include background-grid;
}
.l--2sb.content-on-left.has-2-sb {
  @include breakpoint($bkp-wide-min) {
    & > .col--main {
      @include grid-span(1, 1);

      margin-bottom: 8%;
    }
    & > .col--sb_1 {
      @include grid-span(1, 2);

      margin-bottom: 8%;
    }
    & > .col--sb_2 {
      clear: both;
    }
  }
  @include breakpoint($bkp-wide-ht-min) {
    & > .col--main {
      @include grid-span(1, 1);
    }
    & > .col--sb_1 {
      @include grid-span(1, 2);
    }
    & > .col--sb_2 {
      @include grid-span(1, 3);
    }
    & > .column {
      margin-bottom: 0;
    }
  }
}

// -----------------------------------------------------------------------------
// .layout_2sb variant: &.content-on-right

// CONTENT-RIGHT: There is one sidebar.
.l--2sb.content-on-right.has-1-sb {
  @include add-grid(6 18 at $bkp-wide-min);
  @include add-gutter(1.7 at $bkp-wide-min);
  // @include background-grid;
}
.l--2sb.content-on-right.has-1-sb {
  @include breakpoint($bkp-wide-min) {
    & > .col--main {
      @include grid-span(1, 2);
    }
    & > .col--sidebar {
      @include grid-span(1, 1);
    }
    & > .column {
      margin-bottom: 0;
    }
  }
}
// CONTENT-RIGHT: Present in the layout: both sidebars.
.l--2sb.content-on-right.has-2-sb {
  @include add-grid(6 18 at $bkp-wide-min);
  @include add-gutter(1.7 at $bkp-wide-min);
  @include add-grid(6 6 12 at $bkp-wide-ht-min);
  @include add-gutter(0.85 at $bkp-wide-ht-min);
  // @include background-grid;
}
.l--2sb.content-on-right.has-2-sb {
  @include breakpoint($bkp-wide-min) {
    & > .col--main {
      @include grid-span(1, 2);

      margin-bottom: 8%;
    }
    & > .col--sb_1 {
      @include grid-span(1, 1);

      margin-bottom: 8%;
    }
    & > .col--sb_2 {
      clear: both;
    }
  }
  @include breakpoint($bkp-wide-ht-min) {
    & > .col--main {
      @include grid-span(1, 3);
    }
    & > .col--sb_1 {
      @include grid-span(1, 1);
    }
    & > .col--sb_2 {
      @include grid-span(1, 2);
    }
    & > .column {
      margin-bottom: 0;
    }
  }
}


// #############################################################################
// Grids and flexboxes.

// -----------------------------------------------------------------------------
// Matrix layouts with floats only.

// Shared styles of all .l--matrix variants.
.l--matrix {

  & > .item {
    @include transition-property(all);
    @include transition-duration($transitspeed-mid);

    margin-bottom: $layout-pad*1.5;
    max-width: 100%;

    &:last-child {
      margin-bottom: 0;
    }
  }
  .field_type--image {
    max-width: 100%;
  }
}

.l--matrix--cols-3 {
  @include add-grid(2 at $bkp-narrow-ht-min);
  @include add-gutter(0.085 at $bkp-narrow-ht-min);
  @include add-grid(3 at $bkp-wide-ht-min);
  @include add-gutter(0.1 at $bkp-wide-ht-min);

  @include breakpoint($bkp-narrow-ht-min) {
    & > .item {
      display: block;
    }
  }

  // Two-col grid when wide enough.
  @include breakpoint($bkp-narrow-ht-min $bkp-wide-mt-max) {
    & > .item:nth-child(2n+1) {
      @include grid-span(1, 1);

      clear: left;
    }
    & > .item:nth-child(2n+2) {
      @include grid-span(1, 2);

      clear: right;
    }
    // Note: the first one had its bottom margin: 0 at the basic definition.
    & > .item:nth-last-child(2) {
      margin-bottom: 0;
    }
  }
  // Three-col grid when wide enough.
  @include breakpoint($bkp-wide-ht-min) {
    & > .item:nth-child(3n+1) {
      @include grid-span(1, 1);

      clear: left;
    }
    & > .item:nth-child(3n+2) {
      @include grid-span(1, 2);
    }
    & > .item:nth-child(3n+3) {
      @include grid-span(1, 3);

      clear: right;
    }
    // Note: the first one had its bottom margin: 0 at the basic definition.
    & > .item:nth-last-child(2),
    & > .item:nth-last-child(3) {
      margin-bottom: 0;
    }
  }
}

.l--matrix--cols-4 {
  @include add-grid(2 at $bkp-narrow-mt-min);
  @include add-gutter(0.085 at $bkp-narrow-mt-min);
  @include add-grid(3 at $bkp-wide-min);
  @include add-gutter(0.125 at $bkp-wide-min);
  @include add-grid(4 at $bkp-wide-ht-min);
  @include add-gutter(0.15 at $bkp-wide-ht-min);

  @include breakpoint($bkp-narrow-mt-min) {
    & > .item {
      display: block;
    }
  }

  // Two-col grid when wide enough.
  @include breakpoint($bkp-narrow-mt-min $bkp-narrow-max) {
    & > .item:nth-child(2n+1) {
      @include grid-span(1, 1);

      clear: left;
    }
    & > .item:nth-child(2n+2) {
      @include grid-span(1, 2);

      clear: right;
    }
    // Note: the first one had its bottom margin: 0 at the basic definition.
    & > .item:nth-last-child(2) {
      margin-bottom: 0;
    }
  }
  // Three-col grid when wide enough.
  @include breakpoint($bkp-wide-min $bkp-wide-mt-max) {
    & > .item:nth-child(3n+1) {
      @include grid-span(1, 1);

      clear: left;
    }
    & > .item:nth-child(3n+2) {
      @include grid-span(1, 2);
    }
    & > .item:nth-child(3n+3) {
      @include grid-span(1, 3);

      clear: right;
    }
    // Note: the first one had its bottom margin: 0 at the basic definition.
    & > .item:nth-last-child(2),
    & > .item:nth-last-child(3) {
      margin-bottom: 0;
    }
  }
  // Four-col grid when wide enough.
  @include breakpoint($bkp-wide-ht-min) {
    & > .item:nth-child(4n+1) {
      @include grid-span(1, 1);

      clear: left;
    }
    & > .item:nth-child(4n+2) {
      @include grid-span(1, 2);
    }
    & > .item:nth-child(4n+3) {
      @include grid-span(1, 3);
    }
    & > .item:nth-child(4n+4) {
      @include grid-span(1, 4);

      clear: right;
    }
    // Note: the first one had its bottom margin: 0 at the basic definition.
    & > .item:nth-last-child(2),
    & > .item:nth-last-child(3)
    & > .item:nth-last-child(4) {
      margin-bottom: 0;
    }
  }
}

// -----------------------------------------------------------------------------
// Flexbox layouts.
// See https://css-tricks.com/snippets/css/a-guide-to-flexbox/

// (Note 1.: flexboxes are technically not grids.)
// (Note 2.: but we can provide grid fallbacks to them.)

// Note about fallbacks:
// 1.:  they can either be display: table; or floated grids.
// 2.:  we declare fallbacks only when modernizr has explicitly added
//      .mdz-no-flexbox class.
//    - fallbacks could be provided without this class, with weaker selectors,
//      and then they could be overridden in case of flexbox support, but I
//      wouldn't waste computing power on that, and wouldn't want to increase
//      the chance of any bugs from the additional complexity.
// 2a.: so if modernizr.js couldn't run in the browser (very low percentage,
//      somewhere around 1%(?)), items will have full width instead of showing
//      as columns.

// Basic styles for every device.
.l--flexbox {
  & > .item {
    // We are mobile-first, and flexboxes typically apply at higher widths only,
    // so we need some room between items on small screens, where they are
    // below each other.
    margin-bottom: $layout-pad;

    &:last-child {
      margin-bottom: 0;
    }
  }
}

@include breakpoint($bkp-flexboxes-enable-default) {

  // Fallback table layout for the auto-row.
  .mdz-no-flexbox {
    .l--flexbox--auto-row {
      // Border-spacing puts 'paddings' on the table's sides, but I don't want to
      // over-worry this if I don't have to.
      border-spacing: $layout-pad;
      display: table;
      margin: -1em 0;
      table-layout: fixed;
      width: 100%;

      & > .item {
        display: table-cell;
      }
    }
  }

  // Fallback floated grid for the explicitly wrapped sets.
  .mdz-no-flexbox {
    .l--flexbox--cols-3 {
      @include grids-common;
      @include add-grid(3 at $bkp-flexboxes-enable-default);
      @include add-gutter(0.075 at $bkp-flexboxes-enable-default);

      @include breakpoint($bkp-flexboxes-enable-default) {
        & > .item:nth-child(3n+1) {
          @include grid-span(1, 1);

          clear: left;
        }
        & > .item:nth-child(3n+2) {
          @include grid-span(1, 2);
        }
        & > .item:nth-child(3n+3) {
          @include grid-span(1, 3);

          clear: right;
        }
        // Note: the first one had its bottom margin: 0 at the basic definition.
        & > .item:nth-last-child(2),
        & > .item:nth-last-child(3) {
          margin-bottom: 0;
        }
      }
    }
  }

  // If the browser supports the new flexbox syntax.
  .mdz-flexbox {
    // Common styles.
    .l--flexbox {
      @include display-flex;

      & > .item {
        // These items' flex property will be set later, as per variants.
        // Items will be flex-parents too.
        @include display-flex;

        // If the child element will be other than a div (e.g. an ul) then
        // that's flex property will have to be set ad-hoc.
        & > div {
          @include flex(1 1 auto);
        }
      }
    }

    // .l--flexbox--auto-row is always a single, non-wrapping row.
    .l--flexbox--auto-row {
      @include flex-direction(row);

      & > .item {
        @include flex(1 1 auto);

        margin: 0 1.5%;
        // Hack to force equal width cols.
        // See http://stackoverflow.com/a/7985973
        width: 0;

        &:first-child {
          margin-left: 0;
        }
        &:last-child {
          margin-right: 0;
        }
      }
    }

    // Flexbox that wraps after every 3rd item.
    .l--flexbox--cols-3 {
      @include flex-direction(row);
      @include flex-wrap(wrap);

      & > .item {
        // The 30% here decides that rows can fit 3 items.
        // The flex-grow: 1 before that allows then items to grow from 30% to
        // fill all available width.
        @include flex(1 0 30%);

        // https://bugzilla.mozilla.org/show_bug.cgi?id=958714
        // https://bugzilla.mozilla.org/show_bug.cgi?id=1110305
        margin: $layout-pad*1.25 0 0 3%;

        &:nth-child(3n+1) {
          margin-left: 0;
        }
        &:first-child,
        &:nth-child(2),
        &:nth-child(3) {
          margin-top: 0;
        }
      }
    }
    // Equal column-width variant; overrides.
    .l--flexbox--cols-3.flexbox--equal-width {
      & > .item {
        @include flex(0 0 auto);

        margin: 0;
        padding: $layout-pad*1.35 $layout-pad*0.45 0;
        width: 33.3333%;

        &:first-child,
        &:nth-child(3n+1) {
          padding-left: 0;
          padding-right: $layout-pad*0.9;
        }
        &:nth-child(3n+3) {
          padding-left: $layout-pad*0.9;
          padding-right: 0;
        }
        &:first-child,
        &:nth-child(2),
        &:nth-child(3) {
          padding-top: 0;
        }
      }
    }
  }
}



// #############################################################################
// Predefined layout templates.

.tpl--layout_2col_asm_combi {
  @include add-grid(8 16 at $bkp-narrow-mt-min);
  @include add-gutter(0.7 at $bkp-narrow-mt-min);
  @include add-grid(5 19 at $bkp-wide-mt-min);
  @include add-gutter(0.7 at $bkp-wide-mt-min);

  & > .slot {
    margin-bottom: $layout-pad*0.75;

    &:last-child {
      margin-bottom: 0;
    }
  }
  .slot--bottom {
    clear: both;
  }

  @include breakpoint($bkp-narrow-mt-min) {
    &.has-no-slot-bottom .col--left {
      margin-bottom: 0;
    }
  }
  @include breakpoint($bkp-narrow-mt-min $bkp-wide-lt-max) {
    .col--left {
      @include grid-span(1, 1);
    }
    &.has_left_col {
      .col--right {
        @include grid-span(1, 2);
      }
    }
  }
  @include breakpoint($bkp-wide-mt-min) {
    .col--left {
      @include grid-span(1, 1);
    }
    &.has_left_col {
      .col--right {
        @include grid-span(1, 2);
      }
    }
  }
}


// #############################################################################
// Splitters.
// Note: splitters are currently implemented via the .l--flexbox layout.
// (See config.php's "short tags" section.)

@include breakpoint($bkp-flexboxes-enable-default) {
  .mdz-flexbox {
    .splitter {
      & > .item {
        margin-left: $layout-pad;
        margin-right: $layout-pad;

        &:first-child {
          margin-left: 0;
        }
        &:last-child {
          margin-right: 0;
        }
      }
    }
  }
}
